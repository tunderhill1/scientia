image: node:16

stages:
  - linting
  - testing
  - building
  - deploying

cache:
  paths:
    - node_modules/
    - .yarn

before_script:
  - yarn install --cache-folder .yarn

type-checks:
  stage: linting
  interruptible: true
  except:
    refs:
      - schedules
    changes:
      - "**/README.md"
      - "nginx/*"
  script:
    - yarn tsc

style-checks:
  stage: linting
  interruptible: true
  except:
    refs:
      - schedules
    changes:
      - "**/README.md"
      - "nginx/*"
  script:
    - yarn prettier -c src/**/*

unit-tests:
  stage: testing
  interruptible: true
  except:
    refs:
      - schedules
    changes:
      - "**/README.md"
      - "nginx/*"
  script:
    - yarn test:ci
  artifacts:
    reports:
      junit:
        - junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml


build frontend image:
  image: docker:latest
  stage: building
  interruptible: true
  except:
    changes:
      - "**/README.md"
      - "nginx/*"
  only:
    - master
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    GIT_SUBMODULE_STRATEGY: recursive
    REACT_APP_GAME_LEVELS: $GAME_LEVELS
  tags:
    - docker
  services:
    - docker:dind
  before_script: []
  script:
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE:latest
      --build-arg api_entrypoint=https://scientia.doc.ic.ac.uk/api
      --cache-from $CI_REGISTRY_IMAGE:latest
      .
    - docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

build nginx image:
  image: docker:latest
  stage: building
  interruptible: true
  except:
    changes:
      - "**/README.md"
  only:
    - master
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    GIT_SUBMODULE_STRATEGY: recursive
    CERTIFICATE: $CERT_CHAIN_PEM
    PRIVATE_KEY: $CERT_PRIV_KEY
  tags:
    - docker
  services:
    - docker:dind
  before_script: []
  script:
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE-nginx:latest
      --build-arg certificate="$CERTIFICATE"
      --build-arg private_key="$PRIVATE_KEY"
      --cache-from $CI_REGISTRY_IMAGE-nginx:latest
      --file nginx.Dockerfile
      .
    - docker tag $CI_REGISTRY_IMAGE-nginx:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-nginx
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-nginx

deploy prod:
  variables:
    AUTH_JWT_SECRET_KEY: $AUTH_JWT_SECRET_KEY
    SECRET_KEY: $SECRET_KEY
    API_ROLE_USERNAME: $API_ROLE_USERNAME
    API_ROLE_PASSWORD: $API_ROLE_PASSWORD
    DB_CONN_STR: $DB_CONN_STR
    DB_EDTECH_CONNECTION_STRING: $DB_EDTECH_CONNECTION_STRING
    STORAGE_ROOT: $STORAGE_ROOT
  stage: deploying
  except:
    changes:
      - "**/README.md"
  only:
    - master
  when: manual
  before_script: []
  script:
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker stack deploy -c docker-compose.yml scientia --with-registry-auth
    - docker exec $(docker ps -qf "name=emarking" | head -n1) flask db upgrade
    - docker exec $(docker ps -qf "name=materials" | head -n1) flask db upgrade
  tags:
    - deploy_swarm
  environment:
    name: production-swarm
    url: https://scientia.doc.ic.ac.uk




